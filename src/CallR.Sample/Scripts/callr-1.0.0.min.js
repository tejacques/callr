var hubModule=function(){"use strict";var n=function(n){function u(n){var t=$.Deferred();return i.push([n,t]),t.promise()}function f(n){return t.flushRequests(),n}function e(n){return function(){var i=[].slice.call(arguments),r=function(){return t.server[n].apply(this,i)},e=u(r);return f(e)}}function o(n){return function(){var i=[].slice.call(arguments),r=function(){return t.server[n].apply(this,i)};return u(r)}}var t=$.connection[n],i,r;t.subscriptions={};t.bindEvent=t.on;t.unbindEvent=t.off;t.connect=function(n,t){return $.connection.hub.start(n,t)};t.disconnect=function(n,t){return $.connection.hub.stop(n,t)};i=[];t.flushRequests=function(n){function e(n,t){n().done(function(n){t&&t.resolve(n);f()}).fail(function(n){t&&t.reject(n);f()})}var r=i.length,u,f;if(r===0){t.connection.log("No requests to flush");return}t.connection.log("Flushing request queue");u=!1;$.connection.hub.state===$.signalR.connectionState.disconnected&&(u=!0);f=function(){r--;r===0&&(t.connection.log("Finished flushing request queue"),u&&t.disconnect(),n&&n())};t.connect().then(function(){for(var t=i.length,n=0;n<t;n++)e(i[n][0],i[n][1]);i=[]})};t.api=t.api||{};t.queueApi=t.queueApi||{};t.addAPICall=function(n){t.server[n]&&(t.api[n]=e(n),t.queueApi[n]=o(n))};for(r in t.server)t.server.hasOwnProperty(r)&&t.addAPICall(r);return t.connect(),t};return{init:n}}();
/*
//# sourceMappingURL=callr-1.0.0.min.js.map
*/