var hubModule=function(){"use strict";var n=function(n){function u(n){return function(){var i=t.server[n].apply(this,arguments);return t.request(i)}}function f(n){return function(){var i=function(){return t.server[n].apply(this,arguments)};return t.queueRequest(i)}}var t=$.connection[n],e=t.server,i,r;t.subscriptions={};t.bindEvent=t.on;t.unbindEvent=t.off;t.connect=function(n,t){return $.connection.hub.start(n,t)};t.disconnect=function(n,t){return $.connection.hub.stop(n,t)};i=[];t.queueRequest=function(n){var t=$.Deferred();return i.push([n,t]),t.promise()};t.flushRequests=function(n){function e(n,t){n().done(function(n){t&&t.resolve(n);f()}).fail(function(n){t&&t.reject(n);f()})}var r=i.length,u,f;if(r===0){t.connection.log("No requests to flush");return}t.connection.log("Flushing request queue");u=!1;$.connection.hub.state===$.signalR.connectionState.disconnected&&(u=!0);f=function(){r--;r===0&&(t.connection.log("Finished flushing request queue"),u&&t.stop(),n&&n())};t.connect().done(function(){for(var t=i.length,n=0;n<t;n++)e(i[n][0],i[n][1]);i=[]})};t.request=function(n){return t.flushRequests(),n};t.api=t.api||{};t.queueApi=t.queueApi||{};for(r in t.server)t.server.hasOwnProperty(r)&&(t.api[r]=u(r),t.queueApi[r]=f(r));return t};return{init:n}}();
/*
//# sourceMappingURL=callr-1.0.0.min.js.map
*/